/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pomodoro.timer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import javax.swing.Timer;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;

/**
 *
 * @author swdrana
 */
public class Main extends javax.swing.JFrame implements Runnable {
    int pomodoroTimeInMin = 25;
    long inputTimeInSecond = pomodoroTimeInMin*60;
    long totalTime = inputTimeInSecond;
    long sec, min, hour;
    
    int BreakTimeMinute = 5; 
    int breakTimeInSec = BreakTimeMinute*60;
    boolean startOnce=false;
    
    
    MusicStuff musicObject = new MusicStuff();
    static String filePath = "test.wav";
    
    
    Timer t,startAgain;
    int finishTimes=0;
    public void timeUpMessage() {
        JOptionPane.showMessageDialog(this, "Time is up!", "Information", JOptionPane.INFORMATION_MESSAGE);
        finishTimes++;
    }
    void showCurrentTime() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("hh:mm:ss a");
        LocalDateTime now = LocalDateTime.now();
        currentTime.setText(dtf.format(now).toUpperCase());

//      OR, 

//	DateTimeFormatter formatter6 = DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM);
//	String formattedDate6 = formatter6.format(now);
//      currentTime.setText(formattedDate6);
    }
    void showNoOfPomodoros(){
        displayNoOfPomodors.setText("Currently you have finished: "+finishTimes+" Pomodoro");
    }
    /**
     * Creates new form Main
     */
    public Main() {
        Thread trd = new Thread(this);
        trd.start();
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        currentTime = new javax.swing.JLabel();
        displayTimer = new javax.swing.JLabel();
        breakMassege = new javax.swing.JLabel();
        displayNoOfPomodors = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        breakTimeInput = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnPause = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pomodroTime = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 102)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        title.setFont(new java.awt.Font("Herculanum", 0, 36)); // NOI18N
        title.setForeground(new java.awt.Color(255, 0, 102));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Pomodoro Timer");
        jPanel1.add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 520, -1));

        currentTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentTime.setText("Current Time");
        currentTime.setToolTipText("");
        currentTime.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                currentTimePropertyChange(evt);
            }
        });
        jPanel1.add(currentTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 520, -1));

        displayTimer.setFont(new java.awt.Font("Seven Segment", 0, 60)); // NOI18N
        displayTimer.setForeground(new java.awt.Color(51, 51, 51));
        displayTimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        displayTimer.setText("00 : 25 : 00");
        jPanel1.add(displayTimer, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 520, 70));

        breakMassege.setForeground(new java.awt.Color(255, 0, 102));
        breakMassege.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        breakMassege.setText(".");
        jPanel1.add(breakMassege, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 520, -1));

        displayNoOfPomodors.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        displayNoOfPomodors.setText("Display No Of Pomodors Finish");
        jPanel1.add(displayNoOfPomodors, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 520, -1));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Break Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jLabel1, gridBagConstraints);

        breakTimeInput.setValue(5);
        breakTimeInput.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                breakTimeInputStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(breakTimeInput, gridBagConstraints);

        jLabel2.setText("Minute.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jLabel2, gridBagConstraints);

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 520, 30));

        java.awt.GridBagLayout jPanel3Layout = new java.awt.GridBagLayout();
        jPanel3Layout.columnWidths = new int[] {0, 50, 0, 50, 0};
        jPanel3Layout.rowHeights = new int[] {0};
        jPanel3.setLayout(jPanel3Layout);

        btnPause.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        btnPause.setText("Pause");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(btnPause, gridBagConstraints);

        btnStart.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        btnStart.setForeground(new java.awt.Color(255, 0, 102));
        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 1, 0);
        jPanel3.add(btnStart, gridBagConstraints);

        btnReset.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weighty = 0.2;
        jPanel3.add(btnReset, gridBagConstraints);

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 520, 70));

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Pomodoro Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jLabel3, gridBagConstraints);

        pomodroTime.setValue(25);
        pomodroTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pomodroTimeStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel4.add(pomodroTime, gridBagConstraints);

        jLabel4.setText("Minute.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jLabel4, gridBagConstraints);

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 520, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        // TODO add your handling code here:
        //Pause
//        isPause = true;

        musicObject.playMusic("pause.wav");
        t.stop();
    }//GEN-LAST:event_btnPauseActionPerformed
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        
    System.out.println(totalTime);
        musicObject.playMusic("start.wav");
        t = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                sec = totalTime % 60;
                min = TimeUnit.SECONDS.toMinutes(totalTime) % 60;
                hour = TimeUnit.SECONDS.toHours(totalTime);
                if (totalTime >= 0) {
                    displayTimer.setText(String.format("%02d", min) + " : " + String.format("%02d", sec));

                }
                if (totalTime==0) {
                    musicObject.playMusic("end.wav");
                    timeUpMessage();
                }
                if (totalTime < 0) {
                    breakTimeInSec--;
                    sec=breakTimeInSec%60;
                    min = TimeUnit.SECONDS.toMinutes(breakTimeInSec);
                    breakMassege.setText("Now is break time, wait "+String.format("%02d", min) + " : " + String.format("%02d", sec)+" sec for next pomodoro.");
                    
                    if (breakTimeInSec==0) {
                        breakMassege.setText("");
                        startOnce=true;
                        totalTime = pomodoroTimeInMin * 60;
                        breakTimeInSec = BreakTimeMinute*60;
                    }
                }
                totalTime--;
            }
        });
        if (totalTime > 0) {
            t.start();
        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        musicObject.playMusic("reset.wav");
        totalTime = pomodoroTimeInMin * 60;
        breakTimeInSec = BreakTimeMinute*60;
        if (t.isRunning()) {
            t.stop();
        }
        sec = totalTime % 60;
        min = TimeUnit.SECONDS.toMinutes(totalTime) % 60;
        hour = TimeUnit.SECONDS.toHours(totalTime);
        displayTimer.setText(String.format("%02d", min) + " : " + String.format("%02d", sec));
        breakMassege.setText("");
                    
    }//GEN-LAST:event_btnResetActionPerformed

    private void currentTimePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_currentTimePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_currentTimePropertyChange
    
    private void breakTimeInputStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_breakTimeInputStateChanged
        // TODO add your handling code here:
        BreakTimeMinute = (int) breakTimeInput.getValue();
        breakTimeInSec = BreakTimeMinute*60;
    }//GEN-LAST:event_breakTimeInputStateChanged

    private void pomodroTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pomodroTimeStateChanged
        // TODO add your handling code here:
        pomodoroTimeInMin = (int) pomodroTime.getValue();
        totalTime = pomodoroTimeInMin * 60;
    }//GEN-LAST:event_pomodroTimeStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel breakMassege;
    private javax.swing.JSpinner breakTimeInput;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel currentTime;
    private javax.swing.JLabel displayNoOfPomodors;
    private javax.swing.JLabel displayTimer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSpinner pomodroTime;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
   @Override
    public void run() {
        while (true) {
            try {
                showCurrentTime();
                showNoOfPomodoros();
                
                if (startOnce) {
                    t.start();
                    musicObject.playMusic("start.wav");
                }
                
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    static class ActionListenerImpl implements ActionListener {

        public ActionListenerImpl() {
        }

        @Override
        public void actionPerformed(ActionEvent e) {

        }
    }

    static class ActionListenerImplImpl extends ActionListenerImpl {

        public ActionListenerImplImpl() {
        }
    }
}
